from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters import Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pycoingecko import CoinGeckoAPI
import asyncio
import config

bot = Bot(token=config.TOKEN)  # –í–∞—à–∏—è—Ç —Ç–æ–∫–µ–Ω
dp = Dispatcher()
coingecko = CoinGeckoAPI()

@dp.message(Command(commands=['start']))
async def cmd_start(message: types.Message):
    await message.answer('üëã <b>–ó–¥—Ä–∞–≤–µ–π—Ç–µ, –∞–∑ —Å—ä–º –ö—Ä–∏–ø—Ç–æ –ë–æ—Ç </b>üíé\n'
                         'üìä <b>–ú–æ–∂–µ—Ç–µ –¥–∞ –Ω–∞—É—á–∏—Ç–µ —Ü–µ–Ω–∏—Ç–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—É—Ç–∏—Ç–µ</b>üí∏\n\n'
                         'üìö <b>–¶–µ–Ω–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—É—Ç–∞ - /price</b>\n'
                         '<code> - –ü—Ä–∏–º–µ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - /price Bitcoin</code>\n'
                         '<b>‚ÅâÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞ - /help</b>',
                         parse_mode='HTML')

@dp.message(Command(commands=['help']))
async def cmd_help(message: types.Message):
    await message.answer("‚ÅâÔ∏è<b> –ê–∫–æ –∏–º–∞—Ç–µ –ø—Ä–æ–±–ª–µ–º–∏.</b> \n"
                         "‚úâÔ∏è <b>–ü–∏—à–µ—Ç–µ –º–∏ –Ω–∞ </b> <a href='https://github.com/ItsGeorgiPapazov'>GITHUB</a><b>.</b>",
                         disable_web_page_preview=True,
                         parse_mode='HTML')

@dp.message(Command(commands='price'))
async def cmd_price(message: types.Message):
    if message.text == '/price':
        await message.answer('‚ö†Ô∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª–Ω–æ –∏–∑–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.</b>', parse_mode='HTML')
    else:
        try:
            currency = message.text[7:].capitalize()
            currency_symbol = message.text[7:].lower()
            result = coingecko.get_price(ids=currency, vs_currencies='usd', include_market_cap=True, include_24hr_vol=True, include_24hr_change=True)
            price = float(result[currency.lower()]['usd'])
            change = round(float(result[currency.lower()]['usd_24h_change']), 1)
            market_cap = round(float(result[currency.lower()]['usd_market_cap']))
            volume = round(float(result[currency.lower()]['usd_24h_vol']))
            symbol = coingecko.get_coin_by_id(currency_symbol)["symbol"].upper()

            switcher_emodji = {
                True: 'üìà',
                False: 'üìâ',
            }

            sign = '+' if change > 0 else ''
            change_emodji = switcher_emodji.get(change > 0) if change != 0 else 'üìä'

            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏', callback_data=f'update_{currency}_{symbol}'))

            await message.answer(f'üíé <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—É—Ç–∞: {currency} ({symbol})</b>\n\n'
                                 f'{change_emodji} <b>–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ü–µ–Ω–∞—Ç–∞: {sign}{change}%</b>\n'
                                 f'üí∏ <b>–¶–µ–Ω–∞: {price:,}$</b>\n'
                                 f'üí∞ <b>–ü–∞–∑–∞—Ä–Ω–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {market_cap:,}$</b>\n'
                                 f'‚è± <b>24-—á–∞—Å–æ–≤ –æ–±–µ–º: {volume:,}$</b>',
                                 parse_mode='HTML',
                                 reply_markup=builder.as_markup())
        except (Exception, ValueError):
            await message.answer(f'‚ö†Ô∏è <b>–¢–∞–∑–∏ –≤–∞–ª—É—Ç–∞ –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –∏–ª–∏ –µ –≥—Ä–µ—à–Ω–∞.</b>', parse_mode='HTML')

@dp.callback_query(Text(startswith='update'))
async def cmd_update(callback: types.CallbackQuery):
    _, currency, symbol = callback.data.split("_")
    try:
        result = coingecko.get_price(ids=currency, vs_currencies='usd', include_market_cap=True, include_24hr_vol=True, include_24hr_change=True)
        price = float(result[currency.lower()]['usd'])
        change = round(float(result[currency.lower()]['usd_24h_change']), 1)
        market_cap = round(float(result[currency.lower()]['usd_market_cap']))
        volume = round(float(result[currency.lower()]['usd_24h_vol']))

        switcher_emodji = {
            True: 'üìà',
            False: 'üìâ',
        }

        sign = '+' if change > 0 else ''
        change_emodji = switcher_emodji.get(change > 0) if change != 0 else 'üìä'

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏', callback_data=f'update_{currency}_{symbol}'))

        await callback.message.edit_text(f'üíé <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—É—Ç–∞: {currency} ({symbol})</b>\n\n'
                                         f'{change_emodji} <b>–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ü–µ–Ω–∞—Ç–∞: {sign}{change}%</b>\n'
                                         f'üí∏ <b>–¶–µ–Ω–∞: {price:,}$</b>\n'
                                         f'üí∞ <b>–ü–∞–∑–∞—Ä–Ω–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {market_cap:,}$</b>\n'
                                         f'‚è± <b>24-—á–∞—Å–æ–≤ –æ–±–µ–º: {volume:,}$</b>',
                                         parse_mode='HTML',
                                         reply_markup=builder.as_markup())
    except:
        pass

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
